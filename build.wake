
global def hardfloatProject = millScalaProject "hardfloat" here (chisel3Project, Nil) "hardfloat" "HardfloatBase"

publish scalaProjects = hardfloatProject

global def rocketchipProject = millScalaProject "rocketchip" here (hardfloatProject, Nil) "rocketchip" "RocketChipBase"

publish scalaProjects = rocketchipProject

def vlsi_mem_gen = whichIn "rocket-chip/scripts" "vlsi_mem_gen"

tuple VLSIMemGenOptions =
  global BlackBox Boolean
  global ConfFile String
  global OutputFile String

global def makeVLSIMemGenOptions confFile outputFile = VLSIMemGenOptions False confFile outputFile

global def rocket_vlsi_mem_gen options =
  def cmdline =
    def blackBox = if options.getVLSIMemGenOptionsBlackBox then "-b", Nil else Nil
    def outputFile = "-o", options.getVLSIMemGenOptionsOutputFile, Nil
    def confFile = options.getVLSIMemGenOptionsConfFile, Nil
    vlsi_mem_gen, (blackBox ++ outputFile ++ confFile)

  def inputs =
    def confFile = options.getVLSIMemGenOptionsConfFile
    def outputFile = options.getVLSIMemGenOptionsOutputFile
    def outputDir = simplify "{outputFile}/.."
    vlsi_mem_gen, confFile, outputDir, Nil

  job cmdline inputs | output

tuple RocketChipGeneratorOptions =
  global Jar           String
  global TargetDir     String
  global TopModuleName String
  global ConfigNames   List String
  global ExtraSources  List String

global def makeRocketChipGeneratorOptions jar targetDir topModule configs =
  RocketChipGeneratorOptions jar targetDir topModule configs Nil

tuple RocketChipGeneratorOutputs =
  DTS_            String
  FirrtlFile_     String
  FirrtlAnnoFile_ String
  RomConf_        String
  AllOutputs_     List String
  InputOptions_   RocketChipGeneratorOptions

global def getRocketChipGeneratorOutputsDTS            = getRocketChipGeneratorOutputsDTS_
global def getRocketChipGeneratorOutputsFirrtlFile     = getRocketChipGeneratorOutputsFirrtlFile_
global def getRocketChipGeneratorOutputsFirrtlAnnoFile = getRocketChipGeneratorOutputsFirrtlAnnoFile_
global def getRocketChipGeneratorOutputsRomConf        = getRocketChipGeneratorOutputsRomConf_
global def getRocketChipGeneratorOutputsAllOutputs     = getRocketChipGeneratorOutputsAllOutputs_
global def getRocketChipGeneratorOutputsInputOptions   = getRocketChipGeneratorOutputsInputOptions_

global def runRocketChipGenerator options =
  def jar = options.getRocketChipGeneratorOptionsJar
  def runDir = "rocket-chip"
  def targetDir = options.getRocketChipGeneratorOptionsTargetDir

  def cmdline =
    def rootPackage = "_root_"
    def main = "freechips.rocketchip.system.Generator"
    def configs = catWith "_" options.getRocketChipGeneratorOptionsConfigNames
    def topModule = options.getRocketChipGeneratorOptionsTopModuleName
    def relJar = relative runDir jar
    def relTargetDir = relative runDir targetDir
    which "java", "-cp", relJar, main,
    relTargetDir,
    rootPackage, topModule,
    rootPackage, configs,
    Nil

  def inputs =
    def bootrom = simplify "{runDir}/bootrom/bootrom.img"
    def extras = options.getRocketChipGeneratorOptionsExtraSources
    jar, bootrom, targetDir, extras

  def generatorJob =
    makeJob cmdline inputs
    | setJobDirectory runDir
    | runJob

  def getFile regex = filter (matches regex) allOutputs | head

  def allOutputs = map first generatorJob.outputs
  def annoFile    = getFile '.*\.anno\.json'
  def firrtlFile  = getFile '.*\.fir'
  def romConfFile = getFile '.*\.rom\.conf'
  def dtsFile     = getFile '.*\.dts'

  RocketChipGeneratorOutputs dtsFile firrtlFile annoFile romConfFile allOutputs options
